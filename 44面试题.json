# 44面试题（比较难）
[toc]

## 1、["1", "2", "3"].map(parseInt)
```
["1", "2", "3"].map(parseInt)
```

 >首先, map接受两个参数, 一个回调函数 callback, 一个回调函数的this值
其中回调函数接受三个参数 currentValue, index, arrary;
而题目中, map只传入了回调函数–parseInt.
其次, parseInt 只接受两个两个参数 string, radix(基数).

 可选。表示要解析的数字的基数。该值介于 2 ~ 36 之间。

如果省略该参数或其值为 0，则数字将以 10 为基础来解析。如果它以 “0x” 或 “0X” 开头，将以 16 为基数。

如果该参数小于 2 或者大于 36，则 parseInt() 将返回 NaN。

```
parseInt('1', 0);
parseInt('2', 1);
parseInt('3', 2);
```
备注：    
```
//map的用法：
var c= [1,2,3].map(
function(a,b,c,d){
console.log(a)//1
console.log(b)//2
console.log(c)//3
})
```
 answer :1,NaN NaN


## 2、question   [typeof null, null instanceof Object]

```
[typeof null, null instanceof Object]
```
answer : Object false

>instanceof 运算符用来检测 constructor.prototype 是否存在于参数 object 的原型链上.

## 3、question    [ [3,2,1].reduce(Math.pow),[].reduce(Math.pow) ]

    [ [3,2,1].reduce(Math.pow),[].reduce(Math.pow) ]

>第二个表达式会报异常. 第一个表达式等价于 Math.pow(3, 2) => 9; Math.pow(9, 1) =>9

## 4、question    console.log('Value is ' + (val === 'smtg') ? 'Something' : 'Nothing');


```
var val = 'smtg';
console.log('Value is ' + (val === 'smtg') ? 'Something' : 'Nothing');
```
>简而言之 + 的优先级 大于 ?

>  所以原题等价于 'Value is true' ? 'Somthing' : 'Nonthing' 而不是 'Value is' + (true ? 'Something' : 'Nonthing')

> 答案 'Something'

## 第5题    functions 和 variables 会被提升

```
var name = 'World!';
(function () {
    if (typeof name === 'undefined') {
        var name = 'Jack';
        console.log('Goodbye ' + name);
    } else {
        console.log('Hello ' + name);
    }
})();
```
>Hoisting

>在 JavaScript中， functions 和 variables 会被提升。变量提升是JavaScript将声明移至作用域 scope (全局域或者当前函数作用域) 顶部的行为。
>**注意第一个if里边有个var name = "jack"**，这句话提升了

所以答案是 'Goodbye Jack'

## 第6题   Math.pow(2, 53) == 9007199254740992 是可以表示的最大值

```
var END = Math.pow(2, 53);
var START = END - 100;
var count = 0;
for (var i = START; i <= END; i++) {
    count++;
}
console.log(count);
```
> 在 JS 里, Math.pow(2, 53) == 9007199254740992 是可以表示的最大值. 最大值加一还是最大值. 所以循环不会停.


## 第7题    ary.filter(function(x) { return x === undefined;});

```
var ary = [0,1,2];
ary[10] = 10;
ary.filter(function(x) { return x === undefined;});
```

>解析：

```
var ary = [0,1,2];
ary[10] = 10;
var c = ary.filter(function(x) { console.log(x);
//0,1,2,10
```
## 第8题    ary.filter(function(x) { return x === undefined;});

```
var two   = 0.2
var one   = 0.1
var eight = 0.8
var six   = 0.6
[two - one == one, eight - six == two]
```
>**JavaScript的设计缺陷?浮点运算：0.1 + 0.2 != 0.3**

ANSWER[FALSE,TRUE]
## 第9题   switch 是严格比较, String 实例和 字符串不一样.

```
function showCase(value) {
    switch(value) {
    case 'A':
        console.log('Case A');
        break;
    case 'B':
        console.log('Case B');
        break;
    case undefined:
        console.log('undefined');
        break;
    default:
        console.log('Do not know!');
    }
}
showCase(new String('A'));
```
> switch 是严格比较, String 实例和 字符串不一样.
answere:	 do not know!
## 第10题   

```
function showCase2(value) {
    switch(value) {
    case 'A':
        console.log('Case A');
        break;
    case 'B':
        console.log('Case B');
        break;
    case undefined:
        console.log('undefined');
        break;
    default:
        console.log('Do not know!');
    }
}
showCase2(String('A'));
```

>这里没有new
>还是刚才的知识点, 只不过 String 不仅是个构造函数 直接调用返回一个字符串哦.

## 第11题   4 % 2 => 0

```
function isOdd(num) {
    return num % 2 == 1;
}
function isEven(num) {
    return num % 2 == 0;
}
function isSane(num) {
    return isEven(num) || isOdd(num);
}
var values = [7, 4, '13', -9, Infinity];
values.map(isSane);
```
> 7% 2 => 1
4 % 2 => 0
'13' % 2 => 1
-9 % % 2 => -1
Infinity % 2 => NaN

[true,true,true,false,false]

## 第12题 parseInt()两个参数


```
parseInt(3, 8)
parseInt(3, 2)
parseInt(3, 0)
```
第一个题讲过了, 答案 3, NaN, 3



## 第13题  Array.prototype

```
Array.isArray( Array.prototype )
```

> 一个鲜为人知的实事: Array.prototype => [];

答案: true

## 第14题   if ([0])  boolean

```
var a = [0];
if ([0]) {
  console.log(a == true);
} else {
  console.log("wut");
}
```
> answer:false

## 第15题   []==[]

[]==[]

==是万恶之源
false
## 第16题 

```
'5' + 3//53
'5' - 3//2
```
## 第17题 1 + - + + + - + 1

```
1 + - + + + - + 1
```

>1 + (a)  => 2
a = - (b) => 1
b = + (c) => -1
c = + (d) => -1
d = + (e) => -1
e = + (f) => -1
f = - (g) => -1
g = + 1   => 1

2
## 第18题 ary.map(function(elem) { return '1'; });

```
var ary = Array(3);
ary[0]=2
ary.map(function(elem) { return '1'; });
```
>题目中的数组其实是一个长度为3, 但是没有内容的数组, array 上的操作会跳过这些未初始化的’坑’.

所以答案是 ["1", undefined × 2]

## 第19题 这里argument的值改变和c的值改变互不影响

```
function sidEffecting(ary) {
  ary[0] = ary[2];
}
function bar(a,b,c) {
  c = 10
  sidEffecting(arguments);
  return a + b + c;
}
bar(1,1,1)
```
//这里argument的值改变和c的值改变互不影响

```
function sidEffecting(ary) {

  ary[0] = 2;
}
function bar(a,b,c) {
  c = 10;
  arguments[2]=3;
  console.log(arguments[2])//3
console.log(c)//10
  sidEffecting(arguments);
  return arguments[0] +arguments[1] +arguments[2];
}
var d = bar(1,1,1)
console.log(d)//6
```

### 第20题 a + b;

```
var a = 111111111111111110000,
    b = 1111;
a + b;
```

还是a
## 第21题 var x = [].reverse;

```
var x = [].reverse;
x();
```
答案是window
测试结果是：Uncaught TypeError: Array.prototype.reverse called on null or undefined
    at reverse (native)
    at <anonymous>:2:1
(anonymous) @ VM1428:2

## 第22题   Number.MIN_VALUE > 0

```
Number.MIN_VALUE > 0
```
Number.MIN_VALUE//5e-234

## 24 2==[[[2]]]
2==[[[2]]]

true

##25   、3..toString()

```
3.toString()
//SyntaxError: identifier starts immediately after numeric literal
3..toString()
//"3"
3...toString()
//SyntaxError: missing name after . operator
```
## 第26题   、  var x = y = 1;


```
(function(){
  var x = y = 1;
})();
console.log(y);
console.log(x);
```
答案是 1, error
##第27题   、正则相等

```
var a = /123/,
    b = /123/;
a == b
a === b
```
f f
>正则表达式始终不一样

## 第28题  数组相等比较

```
var a = [1, 2, 3],
    b = [1, 2, 3],
    c = [1, 2, 4]
a ==  b
a === b
a >   c
a <   c
```
答案 false, false, false, true
##第29题  a.prototype Object.getPrototypeOf()

```
var a = {}, b = Object.prototype;
[a.prototype === b, Object.getPrototypeOf(a) === b]
```
Object/getPrototypeOf

>只有 Function 拥有一个 prototype 的属性. 所以 a.prototype 为 undefined.

>而 Object.getPrototypeOf(obj) 返回一个具体对象的原型(该对象的内部[[prototype]]值)

答案 false, true

## 第30题  同上

```
function f() {}
var a = f.prototype, b = Object.getPrototypeOf(f);
a === b
```

>f.prototype 是使用使用 new 创建的 f 实例的原型. 而 Object.getPrototypeOf 是 f 函数的原型.
>a === Object.getPrototypeOf(new f()) // true
b === Function.prototype // true

## 第三十一题  function name的性质

```
function foo() { }
var oldName = foo.name;
foo.name = "bar";
[oldName, foo.name]
```

> function 的name不能改变

## 第32题  replace parsint

```
"1 2 3".replace(/\d/g, parseInt)
```
> parseInt(1，0)  ==》1
parseInt(2，2)  ==》NAN
parseInt(3，4)  ==》3

> 如果replace函数传入的第二个参数是函数, 那么这个函数将接受如下参数

> match 首先是匹配的字符串
p1, p2 …. 然后是正则的分组
offset match 匹配的index
string 整个字符串


**注意空格占位**

## 第33题  原型

```
function f() {}
var parent = Object.getPrototypeOf(f);
f.name // ?
parent.name // ?
typeof eval(f.name) // ?
typeof eval(parent.name) //  ?
```

先说以下答案 'f', 'Empty', 'function', error 这个答案并不重要…..

## 第34题   正则匹配null    [lowerCaseOnly.test(null), lowerCaseOnly.test()]

```
var lowerCaseOnly =  /^[a-z]+$/;
[lowerCaseOnly.test(null), lowerCaseOnly.test()]
```
答案: true, true



## 第三十五题   [,,,].join(", ")

    [,,,].join(", ")
answer:[ , , ]
> [1,2,]长度为2 [2,3,4]长度为3
#### array.join
["a","b"].join("c") ==>[ ac,bc]

## 第三十六题  var a = {class: "Animal", name: 'Fido'};

```
var a = {class: "Animal", name: 'Fido'};
a.class
```


这个题比较流氓.. 因为是浏览器相关, class是个保留字(现在是个关键字了)

所以答案不重要, 重要的是自己在取属性名称的时候尽量避免保留字. 如果使用的话请加引号 a['class']
## 第37题   var a = new Date("epoch")

> var a = new Date("epoch")

invalid Data

## 第38题     Function.length===new Function().length
> var a = Function.length,
>    b = new Function().length
	> a === b

false   a=1 b = 0;

我们知道一个function(Function 的实例)的 length 属性就是函数签名的参数个数, 所以 b.length == 0.


## 第39题  var a = Date(0) var b = new Date(0);var c = new Date();

>var a = Date(0);
>var b = new Date(0);
>var c = new Date();
>[a === b, b === c, a === c]

如果不传参数等价于当前时间.
如果是函数调用 返回一个字符串

a =Sun Mar 19 2017 10:33:35 GMT+0800 (中国标准时间)
b ="1970-01-01T00:00:00.000Z"
c ="2017-03-19T02:33:35.650Z"

## 第40题    var min = Math.min(), max = Math.max()
>var min = Math.min(), max = Math.max()
min < max

有趣的是, Math.min 不传参数返回 Infinity, Math.max 不传参数返回 -Infinity :laughing:

答案: false


## 第41题 RegExp/exec

```
function captureOne(re, str) {
	var match = re.exec(str);
	return match && match[1];
}
var numRe  = /num=(\d+)/ig,
    wordRe = /word=(\w+)/i,
    a1 = captureOne(numRe,  "num=1"),
    a2 = captureOne(wordRe, "word=1"),
    a3 = captureOne(numRe,  "NUM=2"),
    a4 = captureOne(wordRe,  "WORD=2");
[a1 === a2, a3 === a4]
```

因为第一个正则有一个 g 选项 它会‘记忆’他所匹配的内容, 等匹配后他会从上次匹配的索引继续, 而第二个正则不会


## 第42题  new Date("2014-03-19")

> var a = new Date("2014-03-19"),
    b = new Date(2014, 03, 19);
[a.getDay() === b.getDay(), a.getMonth() === b.getMonth()]

这个….

	var a = new Date("2014-03-19"),
	    b = new Date(2014, 3, 19);
    
    console.log(a.getDay())//3
    console.log(b.getDay())//6
    console.log(a.getMonth())//2
    console.log(b.getMonth())//3
    console.log(a)
    console.log(b)
	//"2014-03-19T00:00:00.000Z"
	//"2014-04-18T16:00:00.000Z"

都是套路!

答案 [false, false]

## 第43题  match

```
if ('http://giftwrapped.com/picture.jpg'.match('.gif')) {
  'a gif file'
} else {
  'not a gif file'
}
```

**知识点:**

String/match

String.prototype.match 接受一个正则, 如果不是, 按照 new RegExp(obj) 转化. 所以 . 并不会转义
那么 /gif 就匹配了 /.gif/

---
答案: 'a gif file'


## 第44题
>function foo(a) {
    var a;
    return a;
}
function bar(a) {
    var a = 'bye';
    return a;
}
[foo('hello'), bar('hello')]
